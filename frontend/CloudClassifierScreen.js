import React, { useState } from 'react';
import { View, Text, Image, Button, TouchableOpacity, StyleSheet, ActivityIndicator } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import constants from './constants.json';

export default function CloudClassifierScreen() {
    const [image, setImage] = useState(null);
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);

    const pickImage = async () => {
        setResult(null);
        let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
        if (permissionResult.granted === false) {
            alert("Permission to access camera roll is required!");
            return;
        }
        let pickerResult = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ['images'],
            allowsEditing: true,
            aspect: [1, 1],
            quality: 1,
        });
        if (!pickerResult.canceled && pickerResult.assets && pickerResult.assets.length > 0) {
            setImage(pickerResult.assets[0].uri);
        }
    };

    const takePhoto = async () => {
        setResult(null);
        let permissionResult = await ImagePicker.requestCameraPermissionsAsync();
        if (permissionResult.granted === false) {
            alert("Permission to access camera is required!");
            return;
        }
        let pickerResult = await ImagePicker.launchCameraAsync({
            allowsEditing: true,
            aspect: [1, 1],
            quality: 1,
        });
        if (!pickerResult.canceled && pickerResult.assets && pickerResult.assets.length > 0) {
            setImage(pickerResult.assets[0].uri);
        }
    };

    const submitImage = async () => {
        if (!image) return;
        setLoading(true);
        let formData = new FormData();
        formData.append('file', {
            uri: image,
            name: 'photo.jpg',
            type: 'image/jpeg'
        });
        try {
            let response = await fetch("http://" + constants.SERVER_IP + ":3001/predict", {
                method: 'POST',
                body: formData,
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });
            let json = await response.json();
            setResult(json);
        } catch (error) {
            alert('Prediction failed.');
        }
        setLoading(false);
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Rainfall Prediction By Classifying Clouds</Text>
            <Text style={styles.text}>Note: The classification and prediction are generated by Google's Gemini model and may not always be accurate. Please do not rely solely on these results for important decisions.</Text>
            <TouchableOpacity onPress={pickImage} style={styles.imageBox}>
                {image ? (
                    <Image source={{ uri: image }} style={styles.image} />
                ) : (
                    <Text style={styles.imagePlaceholder}>Tap to choose image</Text>
                )}
            </TouchableOpacity>
            <Button title="Take Photo" onPress={takePhoto} disabled={loading}/>
            <Button title="Submit" onPress={submitImage} disabled={!image || loading} />
            {loading && <ActivityIndicator size="large" color="#888" />}
            {result && (
                <View style={styles.resultBox}>
                    <Text style={styles.resultText}>Classified Type: {result.class}</Text>
                    <Text style={styles.resultText}>Rainfall Probability: {result.rainfall}</Text>
                </View>
            )}
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, alignItems: 'center', justifyContent: 'top', padding: 20, backgroundColor: '#fff' },
    title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, justifyContent: 'center', textAlign: 'center' },
    text: { fontSize: 15, color: '#f00', marginBottom: 20, textAlign: 'center'},
    imageBox: { width: 200, height: 200, borderWidth: 2, borderColor: '#ccc', alignItems: 'center', justifyContent: 'center', marginBottom: 10, borderColor: '#000', borderRadius: 10, borderWidth: 4 },
    image: { width: 200, height: 200, resizeMode: 'cover', borderColor: '#000', borderRadius: 10, borderWidth: 4 },
    imagePlaceholder: { color: '#aaa', textAlign: 'center' },
    resultBox: { marginTop: 20, alignItems: 'center' },
    resultText: { fontSize: 18, marginVertical: 2 },
});